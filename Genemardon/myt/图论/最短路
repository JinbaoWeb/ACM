//应用，最短路，第K短路，走K次最短路（FLOYD+2分），差分约束，零一规划/分数规划（二分/牛顿迭代）

//PS：手写数组的效率要比vector的效率快不少，如果实现卡的紧的可以hash边存下标。

//裸Dijstra

int map[1010][1010];
int dis[1010], vis[1010];
void dij(int x)
{
    for (int i = 1; i <= n; i++) dis[i] = inf;
    memset(vis, 0, sizeof(vis));
    dis[x] = 0;
    for (int i = 1; i <= n; i++)
    {
        int M = inf, pos = 0;
        for (int j = 1; j <= n; j++) if (!vis[j] && M > dis[j])
            {
                M = dis[j]; pos = j;
            }
        vis[pos] = 1;
        for (int j = 1; j <= n; j++) if (map[pos][j] != -1) dis[j] = min(dis[j], dis[pos] + map[j][pos]);
    }

    //优先队列优化Dij

    struct node
    {
        node(int xx, long long disx)
        {
            x = xx; dis = disx;
        }
        int x;
        long long dis;
    };
    struct edge
    {
        int to;
        long long v;
        edge(int TO, long long V)
        {
            to = TO; v = V;
        }
    };
    long long dis[MAXN]; int vis[MAXN];
    bool operator<(node a, node b)
    {
        return a.dis > b.dis;
    }
    vector<edge>e[MAXN];
    void priq_dij(int x)
    {
        priority_queue<node>q;
        while (!q.empty()) q.pop();
        memset(vis, 0, sizeof(vis));
        for (int i = 1; i <= n; i++) dis[i] = inf;
        dis[x] = 0; vis[x] = 0;
        for (int i = 0; i < e[x].size(); i++) if (e[x][i].v < dis[e[x][i].to])
            {
                dis[e[x][i].to] = e[x][i].v;
                node tmp(e[x][i].to, e[x][i].v);
                q.push(tmp);
            }
        for (int i = 1; i <= n; i++)
        {
            while (!q.empty() && vis[q.top().x]) q.pop();
            if (q.empty()) break;
            node tmp = q.top();
            q.pop();
            vis[tmp.x] = 1;
            for (int j = 0; j < e[tmp.x].size(); j++) if (!vis[e[tmp.x][j].to] && tmp.dis + e[tmp.x][j].v < dis[e[tmp.x][j].to])
                {
                    dis[e[tmp.x][j].to] = tmp.dis + e[tmp.x][j].v;
                    node ttmp(e[tmp.x][j].to, dis[e[tmp.x][j].to]);
                    q.push(ttmp);
                }
        }
    }


    //spfa

    struct edge
    {
        int to;
        int v;
        edge(int T, int V)
        {
            to = T;
            v = V;
        }
    };
    vector<edge>e[MAXN];
    int dis[MAXN], vis[MAXN], cnt[MAXN];
    bool spfa(int x)
    {
        queue<int>q;
        while (!q.empty()) q.pop();
        memset(vis, 0, sizeof(vis));
        memset(cnt, 0, sizeof(cnt));
        for (int i = 1; i <= n; i++) dis[i] = inf;
        dis[x] = 0; vis[x] = 1; q.push(x);
        while (!q.empty())
        {
            int FROM = q.front();
            q.pop();
            vis[FROM] = 0;
            for (int i = 0; i < e[FROM].size(); i++) if (dis[FROM] + e[FROM][i].v < dis[e[FROM][i].to])
                {
                    int TO = e[FROM][i].to;
                    dis[TO] = dis[FROM] + e[FROM][i].v;
                    if (!vis[TO])
                    {
                        cnt[TO]++;
                        vis[TO] = 1;
                        if (cnt[TO] == n) return false;
                        q.push(TO);
                    }
                }
        }
        return false;
    }

    //spfa 用来判断环非常的好用。


    //vector 效率非常低，建议手写head,next存边

#include <iostream>
#include <stdio.h>
#include <memory.h>
#include <queue>
    using namespace std;
#define MAX(x,y) (((x)>(y))?(x):(y))
#define MIN(x,y) (((x)<(y))?(x):(y))
#define inf 1000000000
#define MAXN 30005
#define MAXM 150005
    int head[MAXN], next[MAXM];
    int dis[MAXN];
    bool vis[MAXN];
    struct note
    {
        int u, v;
        int c;
        note() {}
        note(int u, int v, int c): u(u), v(v), c(c) {}
    } p[MAXM];
    int e, n, m;
    int cnt[MAXN];
    void addnote(int u, int v, int c)
    {
        p[e] = note(u, v, c);
        next[e] = head[u]; head[u] = e++;
    }
    bool relax(int u, int v, int c)
    {
        if (dis[v] > dis[u] + c)
        {
            dis[v] = dis[u] + c;
            return true;
        }
        return false;
    }
    void init()
    {
        memset(head, -1, sizeof(head));
        memset(next, -1, sizeof(next));
        e = 0;
        for ( int i = 0; i < m; i++)
        {
            int u, v, c;
            scanf ("%d%d%d", &u, &v, &c);
            addnote(u, v, c);
            // addnote(v,u,c); // 双向边
        }
    }
    bool spfa(int src) // kE
    {
        memset(vis, 0, sizeof(vis));
        memset(cnt, 0, sizeof(cnt));
        for ( int i = 1; i <= n; i++)
            dis[i] = inf;
        dis[src] = 0; vis[src] = true;
        queue<int> que; que.push(src);
        while (!que.empty())
        {
            int pre = que.front(); que.pop();
            vis[pre] = false;
            for ( int i = head[pre]; i + 1; i = next[i])
            {
                if (relax(pre, p[i].v, p[i].c) && !vis[p[i].v])
                {
                    if ((++cnt[p[i].v]) > n) return false;
                    que.push(p[i].v);
                    vis[p[i].v] = true;
                }
            }
        }
        return true;
    }


//类DP的拆点SPFA要对拆点后第二维的增量进行考察，盲目遍历所有拆点会造成冗余，大幅增加时间复杂度。
//单源最短路，如果终点只有一个，head_dij+即时return比spfa快，如果除源点其他所有点都要求最短路，spfa来的快。
//SPFA在稠密图中的表现不如heap_dij来的高效。

//0-1分数规划 最小比率换，最小比率生成树
//二分或迭代
//Dinkelbach迭代
//z(L)=∑a[i]*x-L*(∑b[i]*x); x为最优解的xi集 不断将 L'=(∑a[i]*x) / (∑b[i]*x);很快得到结果，比二分快。
//
