//tarjan算法，求强连通分量
//要分清是点双联通还是边双联通
//2-sat
#include <stdio.h>
#include <string.h>
#include <algorithm>
#define MAXN 10010
#define MAXM 100010
using namespace std;
struct note
{
	int u,v;
	note () {}
	note (int u,int v) : u(u),v(v) {}
}p[MAXM];
int head[MAXN],ne[MAXM],dfn[MAXN],low[MAXN],stack[MAXN];
int belong[MAXN];
int e,m,n,cnt,top,index;
void init()
{
	e=cnt=0;
	memset(head,-1,sizeof(head));
	memset(dfn,0,sizeof(dfn));
}
void addnote(int u,int v)
{
	p[e] = note(u,v);
	ne[e]=head[u];
	head[u]=e++;
}
void tarjan(int x,int fa)		//有向图不要fa，因为如果回到fa两点成环。
{
	dfn[x]=low[x]=++index;
	stack[++top]=x;
	for (int i=head[x];i+1;i=ne[i])
	{
		int v=p[i].v;
		if (v==fa) continue;				//无向图重边  v改为i
		if (!vis[v])
		{
			tarjan(v,x);				//无向图重边  x改为i
			low[x]=min(low[x],low[v]);
		}
		else		//有向图这里要加instack,无向图可以不加
			low[x]=min(low[x],dfn[v]);
	}
	if (low[x]==dfn[x])
	{
		cnt++;
		do{
			t=stack[top--];
			belong[t]=cnt;
		}while(t!=x);
	}									//如果点双联通要放到里面
}
void gao()
{
	for (int i=1;i<=n;i++)
		if (!dfn[i])
		{
			top=index=0;
			tarjan(i,-1);
		}
}




//Tarjan 求ge点，注意根节点要另判

void dfs(int x,int fa)
{
	vis[x]=1;
	dfn[x]=low[x]=++index;
	for (int i=1;i<=n;i++)
		if (i!=fa && map[x][i])
		{
			if (!vis[i])
			{
				dfs(i,x);
				low[x]=min(low[x],low[i]);
				if (low[i]>=dfn[x])
					iscut[x]=1;
			}
			else low[x]=min(low[x],dfn[i]);
		}
}




// 2-sat
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <queue>
#include <vector>
#define MAXN 2000
#define MAXM 5000010
using namespace std;
struct note
{
	int u,v;
	note () {}
	note (int u,int v) : u(u),v(v) {}
}p[MAXM];
int dfn[MAXN],low[MAXN],save[MAXN][2],ne[MAXM],stack[MAXN],belong[MAXN],ins[MAXN],head[MAXN];
int e,n,m,top,index,cnt;
void init()
{
	e=top=index=cnt=0;
	memset(head,-1,sizeof(head));
	memset(dfn,0,sizeof(dfn));
	memset(ins,0,sizeof(ins));
}
void addnote(int u,int v)
{
	p[e] = note (u,v);
	ne[e]=head[u];
	head[u]=e++;
}
void tarjan(int x)
{
	dfn[x]=low[x]=++index;
	stack[++top]=x;
	ins[x]=1;
	for (int i=head[x];i+1;i=ne[i])
	{
		int v=p[i].v;
		if (!dfn[v])
		{
			tarjan(v);
			low[x]=min(low[x],low[v]);
		}
		else if (ins[v])
			low[x]=min(low[x],dfn[v]);
	}
	if (dfn[x]==low[x])
	{
		cnt++;
		int t;
		do{
			t=stack[top--];
			ins[t]=0;
			belong[t]=cnt;
		}while(t!=x);
	}
}
void gao()
{
	for (int i=0;i<2*m;i++)
		if (!dfn[i])
			tarjan(i);
}
int main(int argc, char const *argv[])
{
	while (scanf("%d%d",&n,&m) != EOF)
	{
		init();
		for (int i=0;i<m;i++)
		{
			scanf("%d%d",&save[i][0],&save[i][1]);
			if (save[i][0]>save[i][1]) swap(save[i][0],save[i][1]);
		}
		for (int i=0;i<m;i++)
			for (int j=i+1;j<m;j++)
			{
				if ((save[i][0] < save[j][0] && save[i][1] < save[j][1] && save[i][1] > save[j][0]) || (save[i][0] > save[j][0] && save[i][1] > save[j][1] && save[i][0] < save[j][1]))
				{
					//printf("%d %d\n",i,j );
					addnote(i*2,j*2+1);
					addnote(i*2+1,j*2);
					addnote(j*2,i*2+1);
					addnote(j*2+1,i*2);
				}
			}
		gao();
		int flag=1;
		for (int i=0;i<m;i++)
			if (belong[i*2]==belong[i*2+1])
			{
				flag=0;
				break;
			}
		if (flag) 
			printf("panda is telling the truth...\n");
		else
			printf("the evil panda is lying again\n");
	}
	return 0;
}



//需要输出结果的2-sat

#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <queue>
#include <vector>
#define MAXN 20000
#define MAXM 5000010
using namespace std;
struct note
{
	int u,v;
	note () {}
	note (int u,int v) : u(u),v(v) {}
}p[MAXM];
struct span
{
	int st,end;
	span () {}
	span (int st,int end) : st(st),end(end) {}
}sp[MAXN*2];
vector<int>tab[MAXN];
int dfn[MAXN],low[MAXN],ne[MAXM],stack[MAXN],belong[MAXN],ins[MAXN],head[MAXN],opp[MAXN],state[MAXN],d[MAXN];
int e,n,top,index,cnt;
void init()
{
	e=top=index=cnt=0;
	memset(head,-1,sizeof(head));
	memset(dfn,0,sizeof(dfn));
	memset(ins,0,sizeof(ins));
	memset(opp,0,sizeof(opp));
	memset(state,0,sizeof(state));
}
void addnote(int u,int v)
{
	p[e] = note (u,v);
	ne[e]=head[u];
	head[u]=e++;
}
void tarjan(int x)
{
	dfn[x]=low[x]=++index;
	stack[++top]=x;
	ins[x]=1;
	for (int i=head[x];i+1;i=ne[i])
	{
		int v=p[i].v;
		if (!dfn[v])
		{
			tarjan(v);
			low[x]=min(low[x],low[v]);
		}
		else if (ins[v])
			low[x]=min(low[x],dfn[v]);
	}
	if (dfn[x]==low[x])
	{
		cnt++;
		int t;
		do{
			t=stack[top--];
			ins[t]=0;
			belong[t]=cnt;
		}while(t!=x);
	}
}
void gao()
{
	for (int i=0;i<2*n;i++)
		if (!dfn[i])
			tarjan(i);
}
bool check(int a,int b)
{
	if (sp[a].end<=sp[b].st || sp[a].st>=sp[b].end) return false;
	return true;
}
void topsort()
{
	queue<int>q;
	for (int i=1;i<=cnt;i++)
		if (d[i]==0)
			q.push(i);
	while(!q.empty())
	{
		int tmp=q.front();q.pop();
		if (state[tmp]==0)
		{
			state[tmp]=1;
			state[opp[tmp]]=2;
		}
		for (int i=0;i<tab[tmp].size();i++)
		{
			d[tab[tmp][i]]--;
			if (d[tab[tmp][i]]==0)
				q.push(tab[tmp][i]);
		}
	}
}
int main(int argc, char const *argv[])
{
	while (scanf("%d",&n) != EOF)
	{
		init();
		int flag=1;
		for (int i=0;i<n;i++)
		{
			int sh,sm,eh,em,du;
			scanf("%d:%d %d:%d%d",&sh,&sm,&eh,&em,&du);
			if (eh*60+em-sh*60-sm<du)
				flag=0;
			sp[i*2] = span(sh*60+sm,sh*60+sm+du);
			sp[i*2+1] = span(eh*60+em-du,eh*60+em);
		}
		for (int i=0;i<2*n;i++)
			for (int j=i+1;j<2*n;j++)
				if (i/2!=j/2 && check(i,j))
				{
					addnote(i,j^1);
					addnote(j,i^1);
				}
		gao();
		for (int i=0;i<n;i++)
		{
			opp[belong[i*2]]=belong[i*2+1];
			opp[belong[i*2+1]]=belong[i*2];
			if (belong[i*2]==belong[i*2+1])
				flag=0;
		}
		if (flag){
			printf("YES\n");
			for (int i=1;i<=cnt;i++) tab[i].clear();
			for (int i=0;i<e;i++)
				if (belong[p[i].u]!=belong[p[i].v])
				{
					tab[belong[p[i].v]].push_back(belong[p[i].u]);
					d[belong[p[i].u]]++;
				}
			//for (int i=1;i<=cnt;i++) printf("%d ",opp[i] );printf("\n");
			//for (int i=0;i<2*n;i++) printf("%d ",belong[i] );printf("\n");
			topsort();
			//for (int i=1;i<=cnt;i++) printf("%d ",state[i] );printf("\n");
			for (int i=0;i<2*n;i++)
				if (state[belong[i]]==1)
					printf("%02d:%02d %02d:%02d\n",sp[i].st/60,sp[i].st%60,sp[i].end/60,sp[i].end%60 );
		}
		else{
			printf("NO\n");
		}
	}
	return 0;
}



// 2-sat 要求字典序最小，不能用tarjan


#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
#define MAXN 20000
#define MAXM 5000000
using namespace std;
struct note
{
	int u,v;
	note () {}
	note (int u,int v) : u(u),v(v) {}
}p[MAXM];
vector<int>tab;
int n,m,e;
int head[MAXN],ne[MAXM],col[MAXN];
void init()
{
	e=0;
	memset(head,-1,sizeof(head));
	memset(col,0,sizeof(col));
}
void addnote(int u,int v)
{
	p[e] = note (u,v);
	ne[e]=head[u];
	head[u]=e++;
}
bool dfs(int x)
{
	if (col[x]==0)
	{
		if (col[x ^ 1]==1) return false;
		col[x]=1;
		tab.push_back(x);
		if (col[x ^ 1]==0)
		{
			col[x ^ 1]=2;
			tab.push_back(x ^ 1);
		}
		for (int i=head[x];i+1;i=ne[i])
			if (!dfs(p[i].v)) return false;
	}
	if (col[x]==1)
		return true;
	if (col[x]==2)
		return false;
}
void gao()
{
	int cnt=0;
	for (int i=0;i<=2*n;i++)
		if (col[i]==0)
		{
			tab.clear();
			if (!dfs(i))
				for (int j=0;j<tab.size();j++)
					col[tab[j]]=0;
		}
	for (int i=0;i<2*n;i++)
		if (col[i]==1)
			cnt++;
	if (cnt!=n)
		printf("NIE\n");
	else{
		for (int i=0;i<2*n;i++)
			if (col[i]==1)
				printf("%d\n",i+1 );
	}
}
int main(int argc, char const *argv[])
{
	while(scanf("%d%d",&n,&m) != EOF)
	{
		init();
		for (int i=0;i<m;i++)
		{
			int u,v;
			scanf("%d%d",&u,&v);
			u--;v--;
			addnote(u,v^1);
			addnote(v,u^1);
		}
		gao();
	}
	return 0;
}