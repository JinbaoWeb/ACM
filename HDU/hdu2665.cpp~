/*******************************************************************************
 * Author :          jinbao
 * Email :           dongjinbao913106840144@gmail.com
 * Last modified :   2015-06-11 21:06
 * Filename :        hdu2665.cpp
 * Description :     
 * *****************************************************************************/
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <algorithm>
using namespace std;
const int MAX = 100000+5;
int t,n,m;
int tree[30][MAX],sum[30][MAX],a[MAX];
void build(int l,int r,int dep){
	if (l==r) return;
	int mid=(l+r)>>1;
	int same=mid-l+1;
	for (int i=l;i<=r;i++)
		if (tree[dep][i]<a[mid])
			same++;
	int lpos=l,rpos=mid+1;
	for (int i=l;i<=r;i++){
		if (tree[dep][i]<a[mid])
			tree[dep+1][lpos++]=tree[dep][i];
		else if (tree[dep][i]==a[mid] && same>0)
			tree[dep+1][lpos++]=tree[dep][i],same--;
		else
			tree[dep+1][rpos++]=tree[dep][i];
		sum[dep][i]=sum[dep][l-1]+lpos-1;
	}
	build(l,mid,dep+1);
	build(mid+1,r,dep+1);
}
void build2(int dep,int L,int R){
	if (L==R) return;
	int mid=(L+R)>>1;
	int count=0;
	for (int i=L;i<=R;i++){
		if (tree[dep][i]==a[mid])
			count++;
	}
	sum[dep][L]=0;
	int l=L,r=mid+1;
	for (int i=L;i<=R;i++){
		if (i>L)
			sum[dep][i]=sum[dep][i-1];
		if (l<=mid && (tree[dep][i]<a[mid] || (tree[dep][i]==a[mid]&&count-->0)))
			tree[dep+1][l++]=tree[dep][i],sum[dep][i]++;
		else
			tree[dep+1][r++]=tree[dep][i];
	}
	build(dep+1,L,mid);
	build(dep+1,mid+1,R);
}
int query(int L,int R,int l,int r,int dep,int k){
    if (l==r) return tree[dep][l];    //若查询至叶子，则该整数为子区间[l,r]中的第k大的数
    int mid=(L+R)>>1;
    int cnt=sum[dep][r]-sum[dep][l-1];    //计算区间[l,r]进入左子区间的数的个数
    if (cnt>=k){
        int left=L+sum[dep][l-1]-sum[dep][L-1];    //新查询子区间[left,right]
        int right=left+cnt-1;
        return query(L,mid,left,right,dep+1,k);
    }
    else{
        int right=r+sum[dep][R]-sum[dep][r];
        int left=right-(r-l-cnt);
        return query(mid+1,R,left,right,dep+1,k-cnt);
    }
}
void debug(){
	for (int i=0;i<5;i++){
		for (int j=1;j<=n;j++)
			cout<<tree[i][j]<<" ";
		cout<<endl;
	}
}
void solve(){
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;i++){
		scanf("%d",&tree[0][i]);
		a[i]=tree[0][i];
	}
	sort(a+1,a+n+1);
	build(0,1,n);
//	debug();
	for (int i=1;i<=m;i++){
		int l,r,k;
		scanf("%d%d%d",&l,&r,&k);
		printf("%d\n",query(1,n,l,r,0,k));
	}
}
int main(){
	scanf("%d",&t);
	for (int i=0;i<t;i++)
		solve();
    return 0;
}

